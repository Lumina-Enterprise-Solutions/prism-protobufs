syntax = "proto3";

package prism.user.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/Lumina-Enterprise-Solutions/prism-protobufs/gen/go/prism/user/v1;userv1";

// UserService menyediakan metode untuk mengelola dan mengambil detail pengguna.
service UserService {
  // Mengambil data pengguna yang relevan untuk proses otentikasi berdasarkan email.
  rpc GetUserAuthDetailsByEmail(GetUserAuthDetailsByEmailRequest) returns (UserAuthDetailsResponse); // RENAMED RESPONSE

  // Mengambil data pengguna yang relevan untuk proses otentikasi berdasarkan ID.
  rpc GetUserAuthDetailsByID(GetUserAuthDetailsByIDRequest) returns (UserAuthDetailsResponse); // RENAMED RESPONSE

  // Membuat pengguna baru dari registrasi via email/password.
  rpc CreateUser(CreateUserRequest) returns (UserAuthDetailsResponse); // ADDED RPC

  // Membuat atau mengambil pengguna dari alur login sosial (OAuth2).
  rpc CreateSocialUser(CreateSocialUserRequest) returns (UserAuthDetailsResponse); // RENAMED RESPONSE

  rpc GetPermissionsForRole(GetPermissionsForRoleRequest) returns (GetPermissionsForRoleResponse);
  rpc Enable2FA(Enable2FARequest) returns (Enable2FAResponse);
  rpc UpdatePassword(UpdatePasswordRequest) returns (UpdatePasswordResponse);
  rpc UpdateUserStatusBulk(UpdateUserStatusBulkRequest) returns (UpdateUserStatusBulkResponse);
  rpc GenerateImpersonationToken(GenerateImpersonationTokenRequest) returns (GenerateImpersonationTokenResponse);
}

// === Messages ===

// ADDED: Request untuk membuat pengguna standar
message CreateUserRequest {
  string email = 1;
  string password = 2; // Auth service akan mengirim hash, bukan plain password
  string first_name = 3;
  string last_name = 4;
}

message GetUserAuthDetailsByEmailRequest {
  string email = 1;
}

message GetUserAuthDetailsByIDRequest {
  string id = 1;
}

message CreateSocialUserRequest {
  string email = 1;
  string first_name = 2;
  string last_name = 3;
}

// RENAMED: Response yang lebih generik untuk detail otentikasi pengguna.
message UserAuthDetailsResponse {
  string id = 1;
  string email = 2;
  string password_hash = 3 [json_name = "passwordHash"];
  string role_name = 4 [json_name = "roleName"];
  string status = 5;
  bool is_2fa_enabled = 6 [json_name = "is2faEnabled"];
  string totp_secret = 7 [json_name = "totpSecret"];
}

message GetPermissionsForRoleRequest {
  string role_name = 1;
}

message GetPermissionsForRoleResponse {
  repeated string permissions = 1;
}
message Enable2FARequest {
  string user_id = 1;
  string totp_secret = 2;
}

message Enable2FAResponse {
  bool success = 1;
}
message UpdatePasswordRequest {
  string user_id = 1;
  string new_password_hash = 2;
}
message UpdatePasswordResponse {
  bool success = 1;
}
message UpdateUserStatusBulkRequest {
  repeated string user_ids = 1;
  string status = 2; // Status baru yang akan diterapkan (e.g., "suspended", "active")
}

message BulkOperationResult {
  string item_id = 1;
  bool success = 2;
  string error_message = 3;
}

message UpdateUserStatusBulkResponse {
  int32 total_processed = 1;
  int32 total_succeeded = 2;
  int32 total_failed = 3;
  repeated BulkOperationResult results = 4;
}
message UserInfoForToken {
  string id = 1;
  string email = 2;
  string role_name = 3;
}

message GenerateImpersonationTokenRequest {
  UserInfoForToken target_user = 1; // Info user yang akan ditiru
  string actor_id = 2;             // ID admin yang melakukan impersonasi
}

message GenerateImpersonationTokenResponse {
  string access_token = 1;
  google.protobuf.Timestamp expires_at = 2;
}
